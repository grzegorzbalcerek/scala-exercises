object LiistTest extends App {
  val niil: Liist[Int] = Niil
  val a = :::(1,Niil)
  val b = :::(2,a)
  val c = 8 ::: Niil
  val d = 5 ::: 6 ::: c
  assert(Niil.isEmpty == true, "Niil.isEmpty == true")
  assert(a.isEmpty == false, "a.isEmpty == false")
  assert(d.isEmpty == false, "d.isEmpty == false")
  assert((Niil contains "a") == false, """Niil contains "a" == false""")
  assert((d contains 4) == false, "d contains 4 == false")
  assert((d contains 5) == true, "d contains 5 == true")
  assert(Niil + "x" == "x" ::: Niil, """Niil + "x" == "x" ::: Niil""")
  assert(d + 7 == 5 ::: 6 ::: 8 ::: 7 ::: Niil, "d + 7 == 5 ::: 6 ::: 8 ::: 7 ::: Niil")
  assert(Niil ++ b == 2 ::: 1 ::: Niil, "Niil ++ b == 2 ::: 1 ::: Niil")
  assert(b ++ Niil == 2 ::: 1 ::: Niil, "b ++ Niil == 2 ::: 1 ::: Niil")
  assert(b ++ d == 2 ::: 1 ::: 5 ::: 6 ::: 8 ::: Niil, "b ++ d == 2 ::: 1 ::: 5 ::: 6 ::: 8 ::: Niil")
  assert(d.reverse == 8 ::: 6 ::: 5 ::: Niil, "d.reverse == 8 ::: 6 ::: 5 ::: Niil")
  assert((d take 2) == 5 ::: 6 ::: Niil, "d take 2 == 5 ::: 6 ::: Niil")
  assert((b zip d) == ((2,5) ::: (1,6) ::: Niil), "b zip d == (2,5) ::: (1,6) ::: Niil")
  assert(d.map(_ + 1) == 6 ::: 7 ::: 9 ::: Niil, "d.map(_ + 1) == 6 ::: 7 ::: 9 ::: Niil")
  assert(b.flatMap(x => x ::: x ::: Niil) == 2 ::: 2 ::: 1 ::: 1 ::: Niil, "b.flatMap(x => x ::: x ::: Niil) == 2 ::: 2 ::: 1 ::: 1 ::: Niil")
  assert(d.withFilter(_ % 2 == 0) == 6 ::: 8 ::: Niil, "d.withFilter(_ % 2 == 0) == 6 ::: 8 ::: Niil")
  assert(d.takeWhile(_ % 3 != 0) == 5 ::: Niil, "d.takeWhile(_ % 3 != 0) == 5 ::: Niil")
  val f = (x:Int) => x + 5
  val g = (x:Int) => -x
  val functions1: Liist[Int => Int] = f ::: Niil
  val functions2: Liist[Int => Int] = f ::: g ::: Niil
  assert((Niil ap functions1) == niil, "niil97 ap functions1 == Niil")
  assert((b ap Niil) == Niil, "b ap Niil == Niil")
  assert((b ap functions1) == 7 ::: 6 ::: Niil, "b ap functions1 == 7 ::: 6 ::: Niil")
  assert((d ap functions1) == 10 ::: 11 ::: 13 ::: Niil, "d ap functions1 == 10 ::: 11 ::: 13 ::: Niil")
  assert((b ap functions2) == 7 ::: -2 ::: 6 ::: -1 ::: Niil, "b ap functions2 == 7 ::: -2 ::: 6 ::: -1 ::: Niil")
  assert((d ap functions2) == 10 ::: -5 ::: 11 ::: -6 ::: 13 ::: -8 ::: Niil, "d ap functions2 == 10 ::: -5 ::: 11 ::: -6 ::: 13 ::: -8 ::: Niil")
  assert((Niil zipap functions1) == Niil, "Niil zipap functions1 == Niil")
  assert((b zipap Niil) == Niil, "b zipap Niil == Niil")
  assert((b zipap functions1) == 7 ::: Niil, "b zipap functions1 == 7 ::: Niil")
  assert((d zipap functions1) == 10 ::: Niil, "d zipap functions1 == 10 ::: Niil")
  assert((b zipap functions2) == 7 ::: -1 ::: Niil, "b zipap functions2 == 7 ::: -1 ::: Niil")
  assert((d zipap functions2) == 10 ::: -6 ::: Niil, "d zipap functions2 == 10 ::: -6 ::: Niil")
  import Liist._
  assert(lift2(b,d)(_+_) == 7 ::: 6 ::: 8 ::: 7 ::: 10 ::: 9 ::: Niil, "lift2(b,d)(_+_) == 7 ::: 6 ::: 8 ::: 7 ::: 10 ::: 9 ::: Niil")
  assert(lift2(b,niil)(_+_) == Niil, "lift2(b,niil)(_+_) == Niil")
  assert(lift2(niil,d)(_+_) == Niil, "lift2(niil,d)(_+_) == Niil")
  assert(lift3(b,d,c)(_+_+_) == 15 ::: 14 ::: 16 ::: 15 ::: 18 ::: 17 ::: Niil, "lift3(b,d,c)(_+_+_) == 15 ::: 14 ::: 16 ::: 15 ::: 18 ::: 17 ::: Niil")
  assert(lift3(niil,d,c)(_+_+_) == Niil, "lift3(niil,d,c)(_+_+_) == Niil")
  assert(lift3(b,niil,c)(_+_+_) == Niil, "lift3(b,niil,c)(_+_+_) == Niil")
  assert(lift3(b,d,niil)(_+_+_) == Niil, "lift3(b,d,niil)(_+_+_) == Niil")
  assert(ziplift2(b,d)(_+_) == 7 ::: 7 ::: Niil, "ziplift2(b,d)(_+_) == 7 ::: 7 ::: Niil")
  assert(ziplift2(b,niil)(_+_) == Niil, "ziplift2(b,niil)(_+_) == Niil")
  assert(ziplift2(niil,d)(_+_) == Niil, "ziplift2(niil,d)(_+_) == Niil")
  assert(ziplift3(b,d,c)(_+_+_) == 15 ::: Niil, "ziplift3(b,d,c)(_+_+_) == 15 ::: Niil")
  assert(ziplift3(niil,d,c)(_+_+_) == Niil, "ziplift3(niil,d,c)(_+_+_) == Niil")
  assert(ziplift3(b,niil,c)(_+_+_) == Niil, "ziplift3(b,niil,c)(_+_+_) == Niil")
  assert(ziplift3(b,d,niil)(_+_+_) == Niil, "ziplift3(b,d,niil)(_+_+_) == Niil")
  assert(d.foldRight(0)(_+_) == 19, "d.foldRight(0)(_+_) == 19")
  assert(d.foldRight(0)(_-_) == 7, "d.foldRight(0)(_-_) == 7")
  assert(d.foldLeft(0)(_+_) == 19, "d.foldLeft(0)(_+_) == 19")
  assert(d.foldLeft(0)(_-_) == -19, "d.foldLeft(0)(_-_) == -19")
  assert(unfold(4)( x => if (x>0) Some(x,x-1) else None ) == 4 ::: 3 ::: 2 ::: 1 ::: Niil, "unfold(4)( x => if (x>0) Some(x,x-1) else None ) == 4 ::: 3 ::: 2 ::: 1 ::: Niil")
  assert(niil.toStringF == "Niil", "niil.toStringF == Niil")
  assert(a.toStringF == "1 ::: Niil", "a.toStringF == 1 ::: Niil")
  assert(b.toStringF == "2 ::: 1 ::: Niil", "b.toStringF == 2 ::: 1 ::: Niil")
  assert((Niil containsF "a") == false, """Niil containsF "a" == false""")
  assert((d containsF 4) == false, "d containsF 4 == false")
  assert((d containsF 5) == true, "d containsF 5 == true")
  assert((Niil F_+ "x") == "x" ::: Niil, """Niil F_+ "x" == "x" ::: Niil""")
  assert((d F_+ 7) == 5 ::: 6 ::: 8 ::: 7 ::: Niil, "d F_+ 7 == 5 ::: 6 ::: 8 ::: 7 ::: Niil")
  assert((Niil F_++ b) == 2 ::: 1 ::: Niil, "Niil F_++ b == 2 ::: 1 ::: Niil")
  assert((b F_++ Niil) == 2 ::: 1 ::: Niil, "b F_++ Niil == 2 ::: 1 ::: Niil")
  assert((b F_++ d) == 2 ::: 1 ::: 5 ::: 6 ::: 8 ::: Niil, "b F_++ d == 2 ::: 1 ::: 5 ::: 6 ::: 8 ::: Niil")
  assert(d.reverseF == 8 ::: 6 ::: 5 ::: Niil, "d.reverseF == 8 ::: 6 ::: 5 ::: Niil")
  assert((d takeF 2) == 5 ::: 6 ::: Niil, "d takeF 2 == 5 ::: 6 ::: Niil")
  assert((b zipF d) == ((2,5) ::: (1,6) ::: Niil), "b zipF d == (2,5) ::: (1,6) ::: Niil")
  assert(d.mapF(_ + 1) == 6 ::: 7 ::: 9 ::: Niil, "d.mapF(_ + 1) == 6 ::: 7 ::: 9 ::: Niil")
  assert(b.flatMapF(x => x ::: x ::: Niil) == 2 ::: 2 ::: 1 ::: 1 ::: Niil, "b.flatMapF(x => x ::: x ::: Niil) == 2 ::: 2 ::: 1 ::: 1 ::: Niil")
  assert(d.withFilterF(_ % 2 == 0) == 6 ::: 8 ::: Niil, "d.withFilterF(_ % 2 == 0) == 6 ::: 8 ::: Niil")
  assert(d.takeWhileF(_ % 3 != 0) == 5 ::: Niil, "d.takeWhileF(_ % 3 != 0) == 5 ::: Niil")
  assert((Niil apF functions1) == Niil, "Niil apF functions1 == Niil")
  assert((b apF Niil) == Niil, "b apF Niil == Niil")
  assert((b apF functions1) == 7 ::: 6 ::: Niil, "b apF functions1 == 7 ::: 6 ::: Niil")
  assert((d apF functions1) == 10 ::: 11 ::: 13 ::: Niil, "d apF functions1 == 10 ::: 11 ::: 13 ::: Niil")
  assert((b apF functions2) == 7 ::: -2 ::: 6 ::: -1 ::: Niil, "b apF functions2 == 7 ::: -2 ::: 6 ::: -1 ::: Niil")
  assert((d apF functions2) == 10 ::: -5 ::: 11 ::: -6 ::: 13 ::: -8 ::: Niil, "d apF functions2 == 10 ::: -5 ::: 11 ::: -6 ::: 13 ::: -8 ::: Niil")
  assert((Niil zipapF functions1) == Niil, "Niil zipapF functions1 == Niil")
  assert((b zipapF Niil) == Niil, "b zipapF Niil == Niil")
  assert((b zipapF functions1) == 7 ::: Niil, "b zipapF functions1 == 7 ::: Niil")
  assert((d zipapF functions1) == 10 ::: Niil, "d zipapF functions1 == 10 ::: Niil")
  assert((b zipapF functions2) == 7 ::: -1 ::: Niil, "b zipapF functions2 == 7 ::: -1 ::: Niil")
  assert((d zipapF functions2) == 10 ::: -6 ::: Niil, "d zipapF functions2 == 10 ::: -6 ::: Niil")
  assert((Niil zipapF functions1) == Niil, "Niil zipapF functions1 == Niil")
  assert((b zipapF Niil) == Niil, "b zipapF Niil == Niil")
  assert((b zipapF functions1) == 7 ::: Niil, "b zipapF functions1 == 7 ::: Niil")
  assert((d zipapF functions1) == 10 ::: Niil, "d zipapF functions1 == 10 ::: Niil")
  assert((b zipapF functions2) == 7 ::: -1 ::: Niil, "b zipapF functions2 == 7 ::: -1 ::: Niil")
  assert((d zipapF functions2) == 10 ::: -6 ::: Niil, "d zipapF functions2 == 10 ::: -6 ::: Niil")
  assert(d.foldRightT(0)(_-_) == 7, "d.foldRightT(0)(_-_) == 7")
  assert(d.foldLeftR(0)(_+_) == 19, "d.foldLeftR(0)(_+_) == 19")
  assert(d.foldLeftR(0)(_-_) == -19, "d.foldLeftR(0)(_-_) == -19")
}
